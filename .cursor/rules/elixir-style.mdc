---
description:
globs: *.ex,*.exs
alwaysApply: false
---
# Phoenix Best Practices
- **LiveView-First**: Use LiveView as the primary UI technology
- **Function Components**: Use function components for reusable UI elements
- **Context Boundaries**: Respect context boundaries in controllers and LiveViews
- **Thin Controllers**: Keep controllers thin, delegating business logic to contexts
- **Context-Based Organization**: Use Phoenix contexts to define domain boundaries
  lib/my_app/
    accounts/     # User management domain
    planning/     # Travel planning domain
    packing/      # Product catalog domain

# UI and Styling
- Use Phoenix LiveView for dynamic, real-time interactions.
- Implement responsive design with Tailwind CSS.

# Testing
- Write comprehensive tests using ExUnit.
- **Test Public APIs**: Focus on testing public context APIs
- **Mox for Dependencies**: Use Mox for mocking external dependencies
- **Arrange-Act-Assert**: Structure tests with clear setup, action, and verification phases
- Use fixtures for test data, look into `test/support/fixtures` folder for existing fixtures. Create new fixtures if necessary.
- After any change to a test file run it with `mix test <file_path>`
- After several changes run all tests with `mix test`

## HTTP and API Integration
- **Req for HTTP Clients**: Use Req instead of HTTPoison or Tesla
- **Behaviours for API Clients**: Define behaviours for API clients to allow easy mocking
- **Error Handling**: Handle network failures and unexpected responses gracefully
- **Timeouts**: Always set appropriate timeouts for external calls
