---
description: Whenever you need to create new files or gather context about the project
globs:
alwaysApply: false
---
# HamsterTravel Application Architecture

## Project Structure

This is a Phoenix LiveView application for travel planning with the following domain contexts:
- **Accounts** - User management and authentication
- **Planning** - Trip planning, destinations, and itineraries
- **Packing** - Packing lists and items
- **Social** - Social features and sharing
- **Geo** - Geographic data and city information

## File Organization Patterns

### Context Structure
Each context follows this pattern:

```
lib/hamster_travel/
  accounts/           # Domain modules
  accounts.ex         # Public context API
```

### LiveView Organization

LiveViews are organized by domain with components co-located:
```
lib/hamster_travel_web/live/
  planning_live/
    show_trip.ex
    create_trip.ex
    components/
      destination_form.ex
      trip_form.ex
      planning_components.ex
```

### Component Patterns
- **LiveComponents**: Use for stateful, reusable UI components (e.g., [destination_form.ex](mdc:lib/hamster_travel_web/live/planning_live/components/destination_form.ex))
- **Function Components**: Use for simple, stateless UI elements in `*_components.ex` files
- **Component Collections**: Group related function components in files like [planning_components.ex](mdc:lib/hamster_travel_web/live/planning_live/components/planning_components.ex)

## Development Patterns

### LiveComponent Structure
Follow this pattern for LiveComponents:
1. Use `attr` declarations for required properties
2. Implement `update/2` for initial state setup
3. Handle events with `handle_event/3`
4. Use callback functions (like `on_finish`) for parent communication

### Form Handling
- Use `to_form/1` for changeset-to-form conversion
- Process special inputs (like city selection) before submission
- Always handle both `:new` and `:edit` actions in the same form component

### Internationalization
- Use `gettext/1` for all user-facing strings
- Supported locales: English (en) and Russian (ru)
- Run `mix gettext` to extract and merge translations

## Dependencies & Tools

### UI Components
- **Petal Components**: Primary UI component library
- **Heroicons**: Icon library from Tailwind
- **Live Select**: Enhanced select components

### HTTP & APIs
- **Req**: HTTP client for external API calls

### Money & Localization
- **Ex Money**: Money handling and currency operations
- **Ex CLDR**: Localization and formatting

### Development Tools
- **Credo**: Code quality and style checking
- **Phoenix Live Dashboard**: Development monitoring
- **Tailwind CSS**: Utility-first CSS framework
